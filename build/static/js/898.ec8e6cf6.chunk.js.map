{"version":3,"file":"static/js/898.ec8e6cf6.chunk.js","mappings":"8OAKe,SAASA,IACrB,OAA2BC,EAAAA,EAAAA,UAAS,IAApC,eAAQC,EAAR,KAAeC,EAAf,KACA,GAAiCF,EAAAA,EAAAA,UAAS,IAA1C,eAAQG,EAAR,KAAkBC,EAAlB,KAEMC,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAAAC,GACnB,MAAsBA,EAAMC,OAArBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MACb,OAAOD,GACL,IAAK,QACHR,EAASS,GACT,MACF,IAAK,WACHP,EAAYO,GACZ,MACA,QACA,SAyBN,OACI,kBAAMC,SAlBa,SAACJ,GACtBA,EAAMK,iBACN,IAAMC,EAAO,CACZb,MAAAA,EACAE,SAAAA,GAEDE,GAASU,EAAAA,EAAAA,IAAMD,IAVdZ,EAAS,IACVE,EAAY,KAqBV,WACA,uCACM,kBACGY,KAAK,QACLN,KAAK,QACLO,UAAQ,EACRN,MAAOV,EACPiB,SAAUX,QAGnB,mBACA,0CACA,kBACMS,KAAK,OACLN,KAAK,WACLO,UAAQ,EACRN,MAAOR,EACPe,SAAUX,QAGhB,mBACA,mBAAQS,KAAK,SAAb,wB,iECjEQ,SAASG,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGhB,QAETU,GAAKQ,EAAKO,SAAWf,GAH4BS,GAAK,IAK5D,MAAOO,GACPN,GAAK,EACLH,EAAKS,EACL,QACA,IACOP,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAiB,EAAA,GAA2BlB,EAAKC,IGLjF,WACb,MAAM,IAAIkB,UAAU,6IHIgF","sources":["Views/LoginView/LoginView.jsx","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { logIn } from \"redux/auth/auth-operations\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nexport default function LoginForm() {\r\n   const  [email, setEmail] = useState(\"\");\r\n   const  [password, setPassword] = useState(\"\");\r\n \r\n   const dispatch = useDispatch();\r\n   // const items = useSelector(state => state.contacts.items);\r\n \r\n   const handleChange = event => {\r\n     const {name, value} = event.target;\r\n     switch(name) {\r\n       case \"email\" :\r\n         setEmail(value)\r\n         break;\r\n       case \"password\" :\r\n         setPassword(value)\r\n         break;\r\n         default:\r\n         return;\r\n     }\r\n   }\r\n    const clearFields = () => {\r\n      setEmail('');\r\n     setPassword('');\r\n    }\r\n \r\n    const  handleSubmit = (event) => {\r\n     event.preventDefault();\r\n     const user = {\r\n      email,\r\n      password,\r\n    };\r\n     dispatch(logIn(user))  \r\n   //   if (items.find(contact =>contact.name.toLowerCase().includes(newContact.name.toLowerCase()))) {\r\n   //     clearFields();\r\n   //         return alert(`I have your contact already Sergey ))), i would call you`);\r\n   //       }\r\n     // console.log(addContact(newContact))\r\n   //   dispatch(addContact(newContact));\r\n     clearFields();\r\n \r\n   };\r\n   \r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n       <label > Email\r\n             <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                required\r\n                value={email}\r\n                onChange={handleChange}\r\n             />\r\n       </label>\r\n       <br></br>\r\n       <label> Password\r\n       <input\r\n             type=\"text\"\r\n             name=\"password\"\r\n             required\r\n             value={password}\r\n             onChange={handleChange}\r\n             />\r\n       </label>\r\n       <br></br>\r\n       <button type=\"submit\">\r\n          Login\r\n       </button>\r\n       </form>\r\n    \r\n );\r\n   }\r\n ","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["LoginForm","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","event","target","name","value","onSubmit","preventDefault","user","logIn","type","required","onChange","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}